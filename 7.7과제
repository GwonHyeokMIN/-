import os
import cv2 as cv
import cv2
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as img
import math
from math import exp
import random

def Nearest(img,size0,size1):
    n_col = img.shape[0]+2*(img.shape[0]-1)*size0
    n_row = img.shape[1]+2*(img.shape[1]-1)*size1
    n_img = np.zeros((n_col,n_row,img.shape[2]))
    for i in range(0,img.shape[2]):
        for j in range(0, img.shape[0]):
            for k in range(0, img.shape[1]):
                for var0 in range(-size0,size0+1):
                    for var1 in range(-size1,size1+1):
                        n_j = j*(2*size0+1)+var0
                        n_k = k*(2*size1+1)+var1
                        if (n_j >= 0) and (n_j < n_col) == 1:
                            if (n_k >= 0) and (n_k < n_row) == 1:
                                n_img[n_j][n_k][i] = img[j][k][i]
    
    return n_img

def Bilinear(img,size0,size1):
    b_col = img.shape[0]+2*(img.shape[0]-1)*size0
    b_row = img.shape[1]+2*(img.shape[1]-1)*size1
    b_img = np.zeros((b_col,b_row,img.shape[2]))
    for i in range(0,img.shape[2]):
        for j in range(0, img.shape[0]):
            for k in range(0, img.shape[1]):
                b_j = j*(2*size0+1)
                b_k = k*(2*size1+1)
                b_img[b_j][b_k][i] = img[j][k][i]
    for i in range(0,img.shape[2]):
        for j in range(0, img.shape[0]):
            for k in range(0, img.shape[1]):
                for var0 in range(0,2*size0+1):
                    for var1 in range(0,2*size1+1):
                        b_j = j*(2*size0+1)+var0
                        b_k = k*(2*size1+1)+var1
                        p = var0/(2*size0)
                        q = (2*size0-var0)/(2*size0)
                        a = var1/(2*size1)
                        b = (2*size1-var1)/(2*size1)
                        if b_j < b_col:
                            if b_k < b_row:
                                if j == img.shape[0]-1:
                                    if k == img.shape[1]-1:
                                        pass
                                    else:
                                        b_data = b*img[j][k+1][i]+a*img[j][k][i]
                                        b_img[b_j][b_k][i] = b_data

                                elif k == img.shape[1]-1:
                                    b_data = q*img[j][k][i]+p*img[j+1][k][i]
                                    b_img[b_j][b_k][i] = b_data

                                else:
                                    b_data = q*b*img[j][k+1][i]+q*a*img[j][k][i]+p*b*img[j+1][k+1][i]+p*a*img[j+1][k][i]
                                    b_img[b_j][b_k][i] = b_data
                        
    return b_img

def shuffling(img):
    col_cen = (col//2)-1
    row_cen = (row//2)-1
    s_img = np.zeros((col,row))
    for i in range(0,col):
        for j in range(0,row):
            if i <= col_cen:
                if j <= row_cen:
                    s_img[i+col_cen+1][j+row_cen+1] = img[i][j]
                else:
                    s_img[i+col_cen+1][j-row_cen-1] = img[i][j]
            else:
                if j<= row_cen:
                    s_img[i-col_cen-1][j+row_cen+1] = img[i][j]
                else:
                    s_img[i-col_cen-1][j-row_cen-1] = img[i][j]
    return s_img

def spectrum(img_real,img_imag):
    img = np.zeros((col,row))
    for i in range(0,col):
        for j in range(0,row):
            img[i][j] = math.sqrt(math.pow(img_real[i][j],2)+math.pow(img_imag[i][j],2))
    return img

def Fourier(img):
    data_real = 0
    data_imag = 0
    a=(1/(col*row))
    b=(-1)*2*math.pi
    f_img_real = np.zeros((col,row))
    f_img_imag = np.zeros((col,row))
    for u in range(0,col):
        for v in range(0,row):
            for i in range(0,col):
                for j in range(0,row):
                    data_real += img[i][j]*a*math.cos(b*(((u*i)/col)+((v*j)/row)))
                    data_imag += img[i][j]*a*math.sin(b*(((u*i)/col)+((v*j)/row)))
            f_img_real[u][v] = data_real
            f_img_imag[u][v] = data_imag
            data_real = 0
            data_imag = 0
        print((((u+1))/(col)*100))

    return f_img_real,f_img_imag

def inverse_fourier(img_real,img_imag):
    data_real = 0
    data_imag = 0
    b=2*math.pi
    f_img = np.zeros((col,row))
    for u in range(0,col):
        for v in range(0,row):
            for i in range(0,col):
                for j in range(0,row):
                    data_real += img_real[i][j]*(math.cos(b*(((u*i)/col)+((v*j)/row))))-img_imag[i][j]*(math.sin(b*(((u*i)/col)+((v*j)/row))))
            if data_real < 0:
                f_img[u][v] = -data_real
            else:
                f_img[u][v] = data_real
            data_real = 0
            data_imag = 0
        print((((u+1))/(col)*100))
    return f_img

def blour(img):
    for i in range(8,13):
        for j in range(46,54):
            img[i][j] = 0
    for i in range(86,93):
        for j in range(46,54):
            img[i][j] = 0
    return img
            
img = cv2.imread("eagle2.png",cv.IMREAD_GRAYSCALE)
col = img.shape[0]
row = img.shape[1]
real,imag = Fourier(img)
real = shuffling(real)
imag = shuffling(imag)
real = blour(real)
imag = blour(imag)
img = inverse_fourier(real,imag)
plt.imshow(img,cmap=plt.cm.gray)
plt.show()
